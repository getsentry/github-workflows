# Allows updating dependencies to the latest published tag
on:
  workflow_call:
    inputs:
      path:
        description: Dependency path in the source repository, this can be either a submodule, a .properties file or a shell script.
        type: string
        required: true
      name:
        description: Name used for a changelog entry.
        type: string
        required: true
      pattern:
        description: RegEx pattern that will be matched against available versions when picking the latest one.
        type: string
        required: false
        default: ''
      changelog-section:
        description: Section header to attach the changelog entry to.
        type: string
        required: false
        default: Dependencies
      runs-on:
        description: GitHub Actions virtual environment name to run the udpater job on.
        type: string
        required: false
        default: 'ubuntu-latest'
      pr-strategy:
        description: |
          How to handle PRs - can be either of the following:
          * create - create a new PR for new dependency versions as they are released - maintainers may merge or close older PRs manually
          * update - keep a single PR that gets updated with new dependency versions until merged - only the latest version update is available at any time
        type: string
        required: false
        default: create
      _workflow_version:
        description: 'Internal: specify github-workflows (this repo) revision to use when checking out scripts.'
        type: string
        required: false
        default: v1  # Note: update when publishing a new version
    secrets:
      api-token:
        required: true
    outputs:
      prUrl:
        description: "The created/updated PRs url."
        value: ${{ jobs.update.outputs.prUrl }}
      baseBranch:
        description: "The base branch name."
        value: ${{ jobs.update.outputs.baseBranch }}
      prBranch:
        description: "The created/updated pr branch name."
        value: ${{ jobs.update.outputs.prBranch }}
      originalTag:
        description: "The original tag from which the dependency was updated from."
        value: ${{ jobs.update.outputs.originalTag }}
      latestTag:
        description: "The latest tag to which the dependency was updated to."
        value: ${{ jobs.update.outputs.latestTag }}

jobs:
  cancel-previous-run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@a40b8845c0683271d9f53dfcb887a7e181d3918b # Tag: 0.9.1
        with:
          access_token: ${{ github.token }}

  # What we need to accomplish:
  # * update to the latest tag
  # * create a PR
  # * update changelog (including the link to the just created PR)
  #
  # What we actually do is based on whether a PR exists already:
  # * YES it does:
  #    * make the update
  #    * update changelog (with the ID of an existing PR)
  #    * push to the PR
  # * NO it doesn't:
  #    * make the update
  #    * push to a new PR
  #    * update changelog (with the ID of the just created PR)
  #    * push to the PR
  # We do different approach on subsequent runs because otherwise we would spam users' mailboxes
  # with notifications about pushes to existing PRs. This way there is actually no push if not needed.
  update:
    runs-on: ${{ inputs.runs-on }}
    # Map the job outputs to step outputs
    outputs:
      prUrl: ${{ steps.pr.outputs.url }}
      baseBranch: ${{ steps.root.outputs.baseBranch }}
      prBranch: ${{ steps.root.outputs.prBranch }}
      originalTag: ${{ steps.target.outputs.originalTag }}
      latestTag: ${{ steps.target.outputs.latestTag }}
    timeout-minutes: 30
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.api-token }}

      # In order to run scripts from this repo, we need to check it out manually, doesn't seem available locally.
      - name: Check out workflow scripts
        # Note: cannot use `actions/checkout` at the moment because you can't clone outside of the repo root.
        #       Follow https://github.com/actions/checkout/issues/197
        run: |
          mkdir -p ${{ runner.temp }}/ghwf
          cd ${{ runner.temp }}/ghwf
          git init
          git remote add origin https://github.com/getsentry/github-workflows.git
          git fetch --depth 1 origin ${{ inputs._workflow_version }}
          git checkout FETCH_HEAD

      - name: Update to the latest version
        id: target
        run: ${{ runner.temp }}/ghwf/scripts/update-dependency.ps1 -Path '${{ inputs.path }}' -Pattern '${{ inputs.pattern }}'

      - name: Get the base repo info
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: root
        run: |
          $mainBranch = $(git remote show origin | Select-String "HEAD branch: (.*)").Matches[0].Groups[1].Value
          Write-Host '::echo::on'
          Write-Host "::set-output name=baseBranch::$mainBranch"
          $prBranch = switch ('${{ inputs.pr-strategy }}')
          {
              'create' { 'deps/${{ inputs.path }}/${{ steps.target.outputs.latestTag }}' }
              'update' { 'deps/${{ inputs.path }}' }
              default { throw "Unkown PR strategy '${{ inputs.pr-strategy }}'." }
          }
          Write-Host "::set-output name=prBranch::$prBranch"

      - name: Fetch an existing PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        uses: octokit/request-action@971ad48f9c40ed001c41c2671b1e6e8e8165d5af
        id: existing-pr-request
        with:
          route: GET /repos/${{ github.repository }}/pulls?base={base}&head={head}
          head: '${{ github.repository }}:${{ steps.root.outputs.prBranch }}'
          base: '${{ steps.root.outputs.baseBranch }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse the existing PR URL
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: existing-pr
        run: |
          $data = @'
          ${{ steps.existing-pr-request.outputs.data }}
          '@

          $prCount = $($data | jq '. | length')

          Write-Host '::echo::on'
          if ($prCount -eq '0')
          {
              Write-Host "::set-output name=url::"
          }
          elseif ($prCount -eq '1')
          {
              $url = $($data | Select-String '"html_url": +"(.*/pull/.*)"').Matches[0].Groups[1].Value
              Write-Host "::set-output name=url::$url"
          }
          else
          {
              throw "Unexpected number of PRs matched: $prCount"
          }

      - run: git --no-pager diff
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.url == '') }}

      - name: Get target changelog
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        run: |
          $changelog = ${{ runner.temp }}/ghwf/scripts/get-changelog.ps1 `
            -RepoUrl '${{ steps.target.outputs.url }}' `
            -OldTag '${{ steps.target.outputs.originalTag }}' `
            -NewTag '${{ steps.target.outputs.latestTag }}'
          ${{ runner.temp }}/ghwf/scripts/set-github-env.ps1 TARGET_CHANGELOG $changelog

      # First we create a PR only if it doesn't exist. We will later overwrite the content with the same action.
      - name: Create a PR
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.url == '') }}
        uses: peter-evans/create-pull-request@f22a7da129c901513876a2380e2dae9f8e145330
        id: create-pr
        with:
          base: ${{ steps.root.outputs.baseBranch }}
          branch: ${{ steps.root.outputs.prBranch }}
          commit-message: 'chore: update ${{ inputs.path }} to ${{ steps.target.outputs.latestTag }}'
          author: 'GitHub <noreply@github.com>'
          title: 'chore(deps): update ${{ inputs.name }} to ${{ steps.target.outputs.latestTagNice }}'
          body: |
            Bumps ${{ inputs.path }} from ${{ steps.target.outputs.originalTag }} to ${{ steps.target.outputs.latestTag }}.

            Auto-generated by a [dependency updater](https://github.com/getsentry/github-workflows/blob/main/.github/workflows/updater.yml).
            ${{ env.TARGET_CHANGELOG }}
          labels: dependencies
          # draft: true

      - name: Verify we have a PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: pr
        run: |
          Write-Host '::echo::on'
          if ('${{ steps.create-pr.outputs.pull-request-url }}' -ne '')
          {
              Write-Host "::set-output name=url::${{ steps.create-pr.outputs.pull-request-url }}"
          }
          elseif ('${{ steps.existing-pr.outputs.url }}' -ne '')
          {
              Write-Host "::set-output name=url::${{ steps.existing-pr.outputs.url }}"
          }
          else
          {
              throw "PR hasn't been created"
          }

      # If we had to create a new PR, we must do a clean checkout & update the submodule again.
      # If we didn't do this, the new PR would only have a changelog...
      - name: 'After new PR: restore repo'
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.url == '') }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.api-token }}

      - name: 'After new PR: redo the update'
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.url == '') }}
        run: ${{ runner.temp }}/ghwf/scripts/update-dependency.ps1 -Path '${{ inputs.path }}' -Tag '${{ steps.target.outputs.latestTag }}'

      - name: Update Changelog
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        run: |
          ${{ runner.temp }}/ghwf/scripts/update-changelog.ps1 `
            -Name '${{ inputs.name }}' `
            -PR '${{ steps.pr.outputs.url }}' `
            -RepoUrl '${{ steps.target.outputs.url }}' `
            -MainBranch '${{ steps.target.outputs.mainBranch }}' `
            -OldTag '${{ steps.target.outputs.originalTag }}' `
            -NewTag '${{ steps.target.outputs.latestTag }}' `
            -Section '${{ inputs.changelog-section }}'

      - run: git --no-pager diff
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag

      # Now make the PR in its final state. This way we only have one commit and no updates if there are no changes between runs.
      - name: Update the PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        uses: peter-evans/create-pull-request@f22a7da129c901513876a2380e2dae9f8e145330
        with:
          base: ${{ steps.root.outputs.baseBranch }}
          branch: ${{ steps.root.outputs.prBranch }}
          commit-message: 'chore: update ${{ inputs.path }} to ${{ steps.target.outputs.latestTag }}'
          author: 'GitHub <noreply@github.com>'
          title: 'chore(deps): update ${{ inputs.name }} to ${{ steps.target.outputs.latestTagNice }}'
          body: |
            Bumps ${{ inputs.path }} from ${{ steps.target.outputs.originalTag }} to ${{ steps.target.outputs.latestTag }}.

            Auto-generated by a [dependency updater](https://github.com/getsentry/github-workflows/blob/main/.github/workflows/updater.yml).
            ${{ env.TARGET_CHANGELOG }}
          labels: dependencies
